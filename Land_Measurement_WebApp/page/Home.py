import streamlit as st
from PIL import Image
from utils import *

class HomePage:
    def __init__(self):
        pass

    def render(self, navigate_to):
        
        markdown(get_main_html())
        markdown(get_header_html("üìä Survey Measurement Application","Practical Solution for Field Survey Data Processing"))
        tab1, tab2, tab3, tab4 = st.tabs(["Home", "Features", "How it Works","About"])
        with tab1:
            write("")
            write("")
            st.write("") # Memberi jarak
            
            # --- Gambar Utama ---
            try:
                # Ganti dengan path gambar yang relevan dengan survei atau teknologi.
                st.image("Land_Measurement_WebApp/Image/surveyor.png", use_container_width=True, caption="by Gemini AI") 
            except Exception:
               pass

            # --- Teks Pengantar ---
            st.text("""
                    Welcome to the Survey Measurement Application. Transform raw field data into actionable insights.
                    This app streamlines elevation calculations, detects anomalies with AI,
                    and generates professional reports to save you time and enhance your accuracy.
                """)
                

            st.markdown("---")

            # --- Sorotan Fitur Utama ---
            subheader("Why use this app?")
            write("")
            col1, col2, col3 = st.columns(3)
            with col1:
                markdown(get_subheader_html(icon="ü§ñ",subheader="AI Integration",text="Use Gemini AI to automatically detect anomalies in your survey data,and generate professional reports with ease."))
            
            with col2:
                markdown(get_subheader_html(icon="üìà",subheader="Visualization Data",text="Get the interactive graphics like eleveation profil for understanable data"))
                
            with col3:
                markdown(get_subheader_html(icon="‚öôÔ∏è",subheader="Calculation Automation",text="you dont need to manual calculation. Enter thread data and let application count elevation and status for you"))
                
            st.write("") # Memberi jarak
            st.write("") # Memberi jarak
            col_btn = columns([1, 2, 1])
        markdown("___")
        with col_btn[1]:

            if button("Start Survey Now", key="start_survey", use_container_width=True):
                navigate_to("input_points")

        
        with tab2:
            subheader("Features")
            markdown("""
                        - **Mid-thread validation** (top, mid, bottom input)
                        - **Automatic elevation & height difference calculation**
                        - **Distance input between points**
                        - **Auto status labeling:** RISE, FALL, FLAT
                        - **Clean tabular results and interactive graphic display**
                        - **Export results to:**
                            - Excel (.xlsx) with embedded graphs
                            - Word (.docx) report by Gemini AI
                            - PNG plots: elevation profile, bar chart, scatter plot
                        - **AI-powered anomaly detection and analysis**
                        - **Professional survey report generated by AI**
                        - **Interactive charts:** elevation profile, height difference, and distance vs elevation
                        - **Easy navigation and confirmation dialogs to prevent data loss**
                        """)
        with tab3:
        
            markdown("___")
            self.part_image("""1. Click Start Survey Now""","Land_Measurement_WebApp/Image/_1_start.png","Begin your survey by clicking the **Start Survey Now** button on the home page.")
            self.part_image("""2. Input initial parameters""","Land_Measurement_WebApp/Image/_2_data_init.png","Enter the initial parameters for your survey, including the number of points, initial elevation (AMSL), and survey purpose.")
            self.part_image("""3. Configure measurement threads""","Land_Measurement_WebApp/Image/_3_input_thread.png","Set up the measurement threads for your survey points, specifying top, mid, and bottom inputs as needed.")
            self.part_image("""4. Analyze anomaly with AI Gemini""","Land_Measurement_WebApp/Image/_4_Analyze_anomalies.png","Click the **Analyze** button to let AI review your data for potential anomalies.")
            self.part_image("""5. Submit""","Land_Measurement_WebApp/Image/_5_submit.png","After reviewing and making any necessary adjustments, click **Submit** to finalize your data.")
            self.part_image("""6. View table results""","Land_Measurement_WebApp/Image/_6_table.png","Examine the clean tabular results of your survey, including calculated elevations and height differences.")
            self.part_image("""7. Explore graphical analysis""","Land_Measurement_WebApp/Image/_7_graphics.png","Interact with various charts, such as elevation profiles and height difference graphs, to visualize your survey data.")    
            self.part_image("""8. generate AI-powered report""","Land_Measurement_WebApp/Image/_8_ai_report.png","Generate a professional survey report using AI, summarizing your findings and any detected anomalies.")
        with tab4:
            
            header("About This Application")
            subheader("My Mission")
            markdown(
                """The Survey Measurement Application was developed with the goal of revolutionizing traditional survey data processing.
                    By integrating modern web technology (Streamlit) and advanced Artificial Intelligence (Google Gemini),
                    I aim to provi de surveyors, civil engineers, and students with a powerful, intuitive, and efficient tool.
                    Our mission is to simplify complex calculations, enhance data accuracy through anomaly detection,
                    and automate report generation, allowing professionals to focus more on analysis and decision-making.""")
            markdown("___")
            
            subheader("Developer")
            markdown("""his application was conceived and developed by Dimas Satria Pasha, a passionate programmer and civil engineering, 
                currently Vocational High School Student - Modeling Design & Building Information.
                With a keen interest in applying technology to real-world problems.
                Developed as a portfolio project for scholarship applications, this tool showcases skills in
                civil engineering,Python programming, data science, web application development, and AI integration.""")
            markdown("___")
            
            subheader("Technologies Used")
            markdown("""
                        -   **Python**: The core programming language.
                        -   **Streamlit**: For building interactive web applications.
                        -   **Pandas**: For robust data manipulation and analysis.
                        -   **Matplotlib**: For creating compelling data visualizations.
                        -   **Google Gemini API**: For AI-powered anomaly detection and report generation.
                        -   **openpyxl**: For Excel file handling.
                        -   **python-docx**: For Word document generation.
                        -   **PIL (Pillow)**: For image processing.
                   
                """)
            markdown("___")

            write("")
            write("")

            col1, col2 = st.columns(2)
            col3,col4 = st.columns(2)
            instagram_icon, email_icon, github_icon, whatshap_icon = icon()

            with col1:
                markdown(get_subheader_html(subheader="Instagram",icon=f"{instagram_icon}",text="Follow me on Instagram for updates and more projects."))
                if link_button("Instagram","https://www.instagram.com/diespy_art/",key="instagram"):
                    pass

            with col2:
                markdown(get_subheader_html(subheader="Email",icon=f"{email_icon}",text="Reach out via email for inquiries or collaboration."))
                if link_button("Email","mailto:satriapasha269@gmail.com",key="email"):
                    pass

            with col3:
                markdown(get_subheader_html(subheader="GitHub",icon=f"{github_icon}",text="Explore my projects and code on my GitHub account."))
                if link_button("GitHub","https://github.com/Dimas-SP08",key="github"):
                    pass

            with col4:
                markdown(get_subheader_html(subheader="WhatsApp",icon=f"{whatshap_icon}",text="Contact me directly on WhatsApp for quick questions."))
                if link_button("WhatsApp","https://wa.me/+62895343842200",key="whatsapp"):
                    pass

            

            
    

    def part_image(self,title,image_path,text):
        try:
            subheader(title)
            col = columns([2,1])
            with col[0]:
                image(image_path)
            with col[1]:
                markdown(text)
            markdown("___")
        except Exception as e:
            st.error(f"Image not found")

        
    
       
        

        
        
       
        
        
        